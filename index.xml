<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Gary&#39;s Tech Station</title>
        <link>https://chen-gary.github.io/</link>
        <description>Recent content on Gary&#39;s Tech Station</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 30 May 2021 09:11:17 +0800</lastBuildDate><atom:link href="https://chen-gary.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Git Basic Skills</title>
        <link>https://chen-gary.github.io/p/git-basic-skills/</link>
        <pubDate>Sun, 30 May 2021 09:11:17 +0800</pubDate>
        
        <guid>https://chen-gary.github.io/p/git-basic-skills/</guid>
        <description>&lt;h2 id=&#34;配置-configuration&#34;&gt;配置 Configuration&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git config --global user.name &lt;span class=&#34;s2&#34;&gt;&amp;#34;Your Name&amp;#34;&lt;/span&gt;
git config --global user.email &lt;span class=&#34;s2&#34;&gt;&amp;#34;email@example.com&amp;#34;&lt;/span&gt;

git config --list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;创建版本库&#34;&gt;创建版本库&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git init

ls -ah
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;基础命令&#34;&gt;基础命令&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git add &amp;lt;file&amp;gt;
git commit -m &amp;lt;message&amp;gt;

git status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;版本回退&#34;&gt;版本回退&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git log
git log --pretty&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;oneline
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HEAD&lt;/code&gt; 当前版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HEAD^&lt;/code&gt; 上一个版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HEAD^^&lt;/code&gt; 上上一个版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HEAD~100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git reset --hard HEAD^

git log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;回到未来的某个版本&#34;&gt;回到未来的某个版本&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git reset --hard &amp;lt;commit_id&amp;gt;
git reset --hard 1094a

git reflog    &lt;span class=&#34;c1&#34;&gt;# find commit id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;撤销修改&#34;&gt;撤销修改&lt;/h2&gt;
&lt;p&gt;注意：以下命令似乎是旧版git命令，虽然不影响使用，但建议参考&lt;code&gt;git status&lt;/code&gt;的提示，使用新版命令。&lt;/p&gt;
&lt;h3 id=&#34;1-丢弃工作区的修改&#34;&gt;1. 丢弃工作区的修改&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git checkout -- file
git checkout -- README.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;两种情况:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一种是&lt;code&gt;README.md&lt;/code&gt;自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一种是&lt;code&gt;README.md&lt;/code&gt;已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总之，就是让这个文件回到最近一次git commit或git add时的状态。&lt;/p&gt;
&lt;h3 id=&#34;2-丢弃暂存区的修改&#34;&gt;2. 丢弃暂存区的修改&lt;/h3&gt;
&lt;p&gt;用命令&lt;code&gt;git reset HEAD &amp;lt;file&amp;gt;&lt;/code&gt;可以把暂存区的修改撤销掉（unstage），重新放回工作区&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git reset HEAD README.md    &lt;span class=&#34;c1&#34;&gt;# 把暂存区的修改回退到工作区&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着，丢弃工作区的修改&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;3-丢弃commit&#34;&gt;3. 丢弃commit&lt;/h3&gt;
&lt;p&gt;使用版本回退&lt;/p&gt;
&lt;h2 id=&#34;远程仓库&#34;&gt;远程仓库&lt;/h2&gt;
&lt;h3 id=&#34;1-github配置-ssh&#34;&gt;1. Github配置 (SSH)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有&lt;code&gt;id_rsa&lt;/code&gt;和&lt;code&gt;id_rsa.pub&lt;/code&gt;这两个文件，如果已经有了，可直接跳到下一步。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh-keygen -t rsa -C &lt;span class=&#34;s2&#34;&gt;&amp;#34;youremail@example.com&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一路回车&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id_rsa&lt;/code&gt;是私钥&lt;/li&gt;
&lt;li&gt;&lt;code&gt;id_rsa.pub&lt;/code&gt;是公钥&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登陆GitHub，打开“Account settings”，“SSH Keys”页面。然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴&lt;code&gt;id_rsa.pub&lt;/code&gt;文件的内容。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2-将已有的本地仓库添加远程库&#34;&gt;2. (将已有的本地仓库)添加远程库&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在GitHub新建repo&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把一个已有的本地仓库与之关联&lt;/p&gt;
&lt;p&gt;在本地的仓库下运行命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git remote add origin git@github.com:XXXXXX/YYYYYY.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;添加后，远程库的名字就是&lt;code&gt;origin&lt;/code&gt; (这是Git默认的叫法)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（首次）把本地库的所有内容推送到远程库上&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git push -u origin main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：由于远程库是空的，我们第一次推送&lt;code&gt;main&lt;/code&gt;分支时，加上了&lt;code&gt;-u&lt;/code&gt;参数，Git不但会把本地的&lt;code&gt;main&lt;/code&gt;分支内容推送的远程新的&lt;code&gt;main&lt;/code&gt;分支，还会把本地的&lt;code&gt;main&lt;/code&gt;分支和远程的&lt;code&gt;main&lt;/code&gt;分支关联起来，在以后的推送或者拉取时就可以简化命令。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（非首次）把本地库推送到远程库&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git push origin main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意：SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入&lt;code&gt;yes&lt;/code&gt;回车即可。&lt;/p&gt;
&lt;h3 id=&#34;3-删除远程库-解除本地和远程的绑定关系&#34;&gt;3. 删除远程库 (解除本地和远程的绑定关系)&lt;/h3&gt;
&lt;p&gt;如果添加的时候地址写错了，或者就是想删除远程库，&lt;/p&gt;
&lt;p&gt;先用&lt;code&gt;git remote -v&lt;/code&gt;查看远程库信息 (&lt;code&gt;git remote&lt;/code&gt; 可查阅更简单的远程库的信息)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git remote -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;根据名字删除，比如删除&lt;code&gt;origin&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git remote rm origin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;从远程库克隆&#34;&gt;从远程库克隆&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone git@github.com:XXXXX/YYYYY.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;分支管理&#34;&gt;分支管理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;HEAD&lt;/code&gt;指向当前分支 e.g. &lt;code&gt;main&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;main&lt;/code&gt;指向提交&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-分支基础操作创建与合并分支&#34;&gt;1. 分支基础操作（创建与合并分支）&lt;/h3&gt;
&lt;p&gt;实战 (example)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建&lt;code&gt;dev&lt;/code&gt;分支，然后切换到&lt;code&gt;dev&lt;/code&gt;分支&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git checkout -b dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;git checkout&lt;/code&gt;命令加上&lt;code&gt;-b&lt;/code&gt;参数表示创建并切换，相当于以下两条命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git branch dev
git checkout dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用&lt;code&gt;git branch&lt;/code&gt;命令查看当前分支&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git branch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;git branch&lt;/code&gt;命令会列出所有分支，当前分支前面会标一个&lt;code&gt;*&lt;/code&gt;号。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;切换回&lt;code&gt;main&lt;/code&gt;分支&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git checkout main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dev&lt;/code&gt;分支的工作成果合并到&lt;code&gt;main&lt;/code&gt;分支上&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git merge dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;git merge&lt;/code&gt;命令用于合并指定分支到当前分支。&lt;/p&gt;
&lt;p&gt;注意到上面的&lt;code&gt;Fast-forward&lt;/code&gt;信息，Git告诉我们，这次合并是“快进模式”，也就是直接把&lt;code&gt;master&lt;/code&gt;指向&lt;code&gt;dev&lt;/code&gt;的当前提交，所以合并速度非常快。&lt;/p&gt;
&lt;p&gt;当然，也不是每次合并都能&lt;code&gt;Fast-forward&lt;/code&gt;，我们后面会讲其他方式的合并。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除&lt;code&gt;dev&lt;/code&gt;分支&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git branch -d dev
   
git branch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建并切换到新的&lt;code&gt;dev&lt;/code&gt;分支，可以使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git switch -c dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;直接切换到已有的&lt;code&gt;main&lt;/code&gt;分支，可以使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git switch main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;分支基础操作总结&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;查看分支：&lt;code&gt;git branch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创建分支：&lt;code&gt;git branch &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;切换分支：&lt;code&gt;git checkout &amp;lt;name&amp;gt;&lt;/code&gt;或者&lt;code&gt;git switch &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创建+切换分支：&lt;code&gt;git checkout -b &amp;lt;name&amp;gt;&lt;/code&gt;或者&lt;code&gt;git switch -c &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;合并某分支到当前分支：&lt;code&gt;git merge &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除分支：&lt;code&gt;git branch -d &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-解决冲突&#34;&gt;2. 解决冲突&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;main&lt;/code&gt;分支和&lt;code&gt;feature1&lt;/code&gt;分支各自都分别有新的提交&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.liaoxuefeng.com/files/attachments/919023000423040/0&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git merge feature1    &lt;span class=&#34;c1&#34;&gt;# Git告诉我们，readme.txt文件存在冲突，必须手动解决冲突后再提交&lt;/span&gt;

git status    &lt;span class=&#34;c1&#34;&gt;# 也可以告诉我们冲突的文件&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。&lt;/p&gt;
&lt;p&gt;直接查看README.md的内容:&lt;/p&gt;
&lt;p&gt;Git用&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;，&lt;code&gt;=======&lt;/code&gt;，&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;标记出不同分支的内容&lt;/p&gt;
&lt;p&gt;手动解决冲突后再&lt;strong&gt;提交&lt;/strong&gt; =&amp;gt; 现在，&lt;code&gt;master&lt;/code&gt;分支和&lt;code&gt;feature1&lt;/code&gt;分支变成了下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.liaoxuefeng.com/files/attachments/919023031831104/0&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;查看分支的合并情况：&lt;code&gt;git log --graph --pretty=oneline --abbrev-commit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最后，删除&lt;code&gt;feature1&lt;/code&gt;分支：&lt;code&gt;git branch -d feature1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;工作完成。&lt;/p&gt;
&lt;h3 id=&#34;3-分支管理策略-普通模式合并&#34;&gt;3. 分支管理策略 (普通模式合并)&lt;/h3&gt;
&lt;p&gt;通常，合并分支时，如果可能，Git会用&lt;code&gt;Fast forward&lt;/code&gt;模式，但这种模式下，删除分支后，会丢掉分支信息。&lt;/p&gt;
&lt;p&gt;如果要强制禁用&lt;code&gt;Fast forward&lt;/code&gt;模式，Git就会在merge时生成一个新的&lt;strong&gt;commit&lt;/strong&gt;，这样，从分支历史上就可以看出分支信息。&lt;/p&gt;
&lt;p&gt;准备合并&lt;code&gt;dev&lt;/code&gt;分支，请注意&lt;code&gt;--no-ff&lt;/code&gt;参数，表示禁用&lt;code&gt;Fast forward&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git merge --no-ff -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;merge with no-ff&amp;#34;&lt;/span&gt; dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为本次合并要创建一个新的commit，所以加上&lt;code&gt;-m&lt;/code&gt;参数，把commit描述写进去。&lt;/p&gt;
&lt;h3 id=&#34;4-bug分支-stash功能&#34;&gt;4. Bug分支 (stash功能)&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git stash

&lt;span class=&#34;c1&#34;&gt;# 去别的分支修bug&lt;/span&gt;

git stash list

&lt;span class=&#34;c1&#34;&gt;# method 1&lt;/span&gt;
git stash apply    &lt;span class=&#34;c1&#34;&gt;# 恢复，但是恢复后，stash内容并不删除&lt;/span&gt;
git stash drop     &lt;span class=&#34;c1&#34;&gt;# 删除stash内容&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# method 2&lt;/span&gt;
git stash pop      &lt;span class=&#34;c1&#34;&gt;# 恢复的同时把stash内容也删了 (recommended)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可以多次stash，恢复的时候，先用&lt;code&gt;git stash list&lt;/code&gt;查看，然后恢复指定的stash，用命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git stash apply stash@&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;0&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Q: 如果在两个独立的分支上有同样的bug (e.g. &lt;code&gt;main&lt;/code&gt;和&lt;code&gt;dev&lt;/code&gt;上有同一bug)，且&lt;code&gt;main&lt;/code&gt;上的bug已被修复，如何优雅地/简单地修复&lt;code&gt;dev&lt;/code&gt;上的bug？&lt;/p&gt;
&lt;p&gt;A: 使用&lt;code&gt;cherry-pick&lt;/code&gt;命令&lt;/p&gt;
&lt;h3 id=&#34;5-feature分支-强行删除未合并的分支&#34;&gt;5. Feature分支 (强行删除未合并的分支)&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git branch -d feature-vulcan
error: The branch &lt;span class=&#34;s1&#34;&gt;&amp;#39;feature-vulcan&amp;#39;&lt;/span&gt; is not fully merged.
If you are sure you want to delete it, run &lt;span class=&#34;s1&#34;&gt;&amp;#39;git branch -D feature-vulcan&amp;#39;&lt;/span&gt;.

&lt;span class=&#34;c1&#34;&gt;# Git友情提醒，feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的-D参数&lt;/span&gt;

$ git branch -D feature-vulcan
Deleted branch feature-vulcan &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;was 287773e&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;开发一个新feature，最好新建一个分支；&lt;/p&gt;
&lt;p&gt;如果要丢弃一个没有被合并过的分支，可以通过&lt;code&gt;git branch -D &amp;lt;name&amp;gt;&lt;/code&gt;强行删除。&lt;/p&gt;
&lt;h3 id=&#34;6-多人协作&#34;&gt;6. 多人协作&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看远程库的信息&lt;/span&gt;
git remote
git remote -v

&lt;span class=&#34;c1&#34;&gt;# 推送分支&lt;/span&gt;
git push origin master
git push origin dev
&lt;span class=&#34;c1&#34;&gt;# 不一定所有分支都要推送到远程，比如bug分支只要留在本地repo就行了&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;抓取分支&#34;&gt;抓取分支&lt;/h4&gt;
&lt;p&gt;多人协作时，大家都会往&lt;code&gt;master&lt;/code&gt;和&lt;code&gt;dev&lt;/code&gt;分支上推送各自的修改。&lt;/p&gt;
&lt;p&gt;当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的&lt;code&gt;master&lt;/code&gt;分支。不信可以用&lt;code&gt;git branch&lt;/code&gt;命令看看&lt;/p&gt;
&lt;p&gt;现在，你的小伙伴要在&lt;code&gt;dev&lt;/code&gt;分支上开发，就必须创建远程&lt;code&gt;origin&lt;/code&gt;的&lt;code&gt;dev&lt;/code&gt;分支到本地，于是他用这个命令创建本地&lt;code&gt;dev&lt;/code&gt;分支：&lt;/p&gt;
&lt;p&gt;(注意：在本地创建和远程分支对应的分支，使用&lt;code&gt;git checkout -b branch-name origin/branch-name&lt;/code&gt;，本地和远程分支的名称最好一致)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git checkout -b dev origin/dev
&lt;span class=&#34;c1&#34;&gt;# git pull #???拉取远端dev?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你的小伙伴已经向&lt;code&gt;origin/dev&lt;/code&gt;分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送。&lt;/p&gt;
&lt;p&gt;推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用&lt;code&gt;git pull&lt;/code&gt;把最新的提交从&lt;code&gt;origin/dev&lt;/code&gt;抓下来，然后，在本地合并，解决冲突，再推送。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git pull&lt;/code&gt;也失败了，原因是没有指定本地&lt;code&gt;dev&lt;/code&gt;分支与远程&lt;code&gt;origin/dev&lt;/code&gt;分支的链接，根据提示，设置&lt;code&gt;dev&lt;/code&gt;和&lt;code&gt;origin/dev&lt;/code&gt;的链接。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git branch --set-upstream-to&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;origin/&amp;lt;branch_remote&amp;gt; &amp;lt;branch_local&amp;gt;

git branch --set-upstream-to&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;origin/dev dev

git pull
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这回&lt;code&gt;git pull&lt;/code&gt;成功，但是合并有冲突，需要手动解决。&lt;/p&gt;
&lt;h4 id=&#34;多人协作小结&#34;&gt;多人协作小结&lt;/h4&gt;
&lt;p&gt;多人协作的工作模式通常是这样：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先，可以试图用&lt;code&gt;git push origin &amp;lt;branch-name&amp;gt;&lt;/code&gt;推送自己的修改；&lt;/li&gt;
&lt;li&gt;如果推送失败，则因为远程分支比你的本地更新，需要先用&lt;code&gt;git pull&lt;/code&gt;试图合并；&lt;/li&gt;
&lt;li&gt;如果合并有冲突，则解决冲突，并在本地提交；&lt;/li&gt;
&lt;li&gt;没有冲突或者解决掉冲突后，再用&lt;code&gt;git push origin &amp;lt;branch-name&amp;gt;&lt;/code&gt;推送就能成功！&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果&lt;code&gt;git pull&lt;/code&gt;提示&lt;code&gt;no tracking information&lt;/code&gt;，则说明本地分支和远程分支的链接关系没有创建，用命令&lt;code&gt;git branch --set-upstream-to &amp;lt;branch-name&amp;gt; origin/&amp;lt;branch-name&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;注意：可以克隆指定分支&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone -b &amp;lt;branch&amp;gt; &amp;lt;remote_repo&amp;gt;

git clone -b BBBBBBB git@github.com:XXXXXX/YYYYYYY.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;rebase&#34;&gt;Rebase&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git rebase
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我看不懂。。。&lt;/p&gt;
&lt;h2 id=&#34;标签管理&#34;&gt;标签管理&lt;/h2&gt;
&lt;p&gt;Git的标签：指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动）&lt;/p&gt;
&lt;p&gt;tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起&lt;/p&gt;
&lt;h3 id=&#34;1-创建标签&#34;&gt;1. 创建标签&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git checkout main

&lt;span class=&#34;c1&#34;&gt;# 默认标签是打在最新提交的commit上的&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 1&lt;/span&gt;
git tag &amp;lt;name&amp;gt;
git tag v1.0

&lt;span class=&#34;c1&#34;&gt;# 2&lt;/span&gt;
git tag &amp;lt;tag_name&amp;gt; &amp;lt;commit_id&amp;gt;
git tag v0.9 f52c633

&lt;span class=&#34;c1&#34;&gt;# 3 创建带有说明的标签&lt;/span&gt;
git tag -a &amp;lt;tag_name&amp;gt; -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;blablabla...&amp;#34;&lt;/span&gt;
git tag -a v0.1 -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;version 0.1 released&amp;#34;&lt;/span&gt; 1094adb

git tag    &lt;span class=&#34;c1&#34;&gt;# 查看所有标签&lt;/span&gt;
git show &amp;lt;tagname&amp;gt;    &lt;span class=&#34;c1&#34;&gt;# 查看标签信息&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-操作标签&#34;&gt;2. 操作标签&lt;/h3&gt;
&lt;p&gt;删除标签&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git tag -d v0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。&lt;/p&gt;
&lt;p&gt;如果要推送某个标签到远程，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git push origin &amp;lt;tag_name&amp;gt;
git push origin v1.0

&lt;span class=&#34;c1&#34;&gt;# 一次性推送全部尚未推送到远程的本地标签&lt;/span&gt;
git push origin --tags
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果标签已经推送到远程，要删除远程标签就麻烦一点：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 先从本地删除&lt;/span&gt;
git tag -d v0.9
&lt;span class=&#34;c1&#34;&gt;# 然后，从远程删除&lt;/span&gt;
git push origin :refs/tags/v0.9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;其他命令&#34;&gt;其他命令&lt;/h2&gt;
&lt;p&gt;不常用的基础命令&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;查看修改&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git diff
git diff README.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git rm &amp;lt;file&amp;gt;    &lt;span class=&#34;c1&#34;&gt;# 与`git add&amp;lt;file&amp;gt;`效果一样&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;强制添加被ignore的文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git add -f &amp;lt;file_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检查&lt;code&gt;.gitignore&lt;/code&gt;对于某个文件的规则&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git check-ignore -v &amp;lt;file_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Git会告诉我们，&lt;code&gt;.gitignore&lt;/code&gt;的第X行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置别名&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# e.g. 让st表示status&lt;/span&gt;
git config --global alias.st status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或直接在git的全局/某个repo的config文件中配置&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Blender Tutorial Notes</title>
        <link>https://chen-gary.github.io/p/blender-tutorial-notes/</link>
        <pubDate>Wed, 03 Mar 2021 16:48:34 +0800</pubDate>
        
        <guid>https://chen-gary.github.io/p/blender-tutorial-notes/</guid>
        <description>&lt;p&gt;View: Numpad 1 / 3 / 7, or &lt;code&gt;ctrl&lt;/code&gt; + Numpad 1 / 3 / 7&lt;/p&gt;
&lt;p&gt;&lt;code&gt;E&lt;/code&gt; to extrude&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;alt&lt;/code&gt; + &lt;code&gt;E &lt;/code&gt; face normal&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;I&lt;/code&gt; to insert&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;double lick &lt;code&gt;I&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;B&lt;/code&gt; while doing insert (if &lt;code&gt;B&lt;/code&gt; does not work, press &lt;code&gt;I&lt;/code&gt; again to disable &lt;strong&gt;individual faces&lt;/strong&gt;) (e.g. car window)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;G&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;S&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;R&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;O&lt;/code&gt; proportional editing (when modeling the tree)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;B&lt;/code&gt; Bevel&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alt&lt;/code&gt; + &lt;code&gt;S&lt;/code&gt; shrink / flatten&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;right click&lt;/code&gt; place 3D curser&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;S&lt;/code&gt; &amp;gt; Cursor to selected&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;C&lt;/code&gt; re-center 3D curser&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;L&lt;/code&gt; select linked (in edit mode)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;L&lt;/code&gt; to deselect linked&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;selection-method&#34;&gt;Selection Method&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;L&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Loop select: &lt;code&gt;alt&lt;/code&gt; + click on edge (in &lt;strong&gt;face selection mode&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;circle select: &lt;code&gt;C&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;deselect: middle mouse&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ring select: &lt;code&gt;alt&lt;/code&gt; + &lt;code&gt;ctrl&lt;/code&gt; (in &lt;strong&gt;edge select mode&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;Loop select: &lt;code&gt;alt&lt;/code&gt; + click on edge (in &lt;strong&gt;edge selection mode&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;select shortest path: &lt;code&gt;ctrl&lt;/code&gt; (in &lt;strong&gt;edge select mode&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;box select: &lt;code&gt;B&lt;/code&gt; (in &lt;strong&gt;vertex select mode&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alt&lt;/code&gt; + &lt;code&gt;Z&lt;/code&gt; enable/disable X-ray (to select the back vertices)&lt;/p&gt;
&lt;p&gt;Lasso select (套索): &lt;code&gt;ctrl&lt;/code&gt; + right mouse button&lt;/p&gt;
&lt;p&gt;Grow selection (select all faces neighboring to the selected face): &lt;code&gt;ctrl&lt;/code&gt; + Numpad plus &lt;code&gt;+&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Shrink selection (opposite to &lt;strong&gt;grow selection&lt;/strong&gt;): &lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;-&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;select random&lt;/p&gt;
&lt;p&gt;select similar: &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;G&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;checker deselect (间隔选中效果，像足球那样): &lt;code&gt;F&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;H&lt;/code&gt; hide selected objects&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;alt&lt;/code&gt; + &lt;code&gt;H&lt;/code&gt; unhide all&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;I&lt;/code&gt;: Invert selection (选中所有未被当前选中的东西)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Loop cut: &lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;R&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Knife tool: &lt;code&gt;K&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;ctrl&lt;/code&gt;: snap to center with knife tool&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C&lt;/code&gt;: angle constraint with knife tool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;ctrl&lt;/code&gt; + 1-5: &lt;strong&gt;subdivision modifier&lt;/strong&gt; (remember to &lt;strong&gt;apply&lt;/strong&gt; this modifier)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;if it make the object &lt;strong&gt;not low-poly&lt;/strong&gt;, then use &lt;strong&gt;Decimate modifier&lt;/strong&gt; to make it back to low-poly.&lt;/p&gt;
&lt;p&gt;(see video around 48:00)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;,&lt;/code&gt;: Orientation&lt;/p&gt;
&lt;p&gt;snap (上方的磁贴icon) (hotkey: &lt;code&gt;ctrl&lt;/code&gt; when using &lt;code&gt;G&lt;/code&gt;) &amp;mdash;-&amp;gt; 把两个vertices连在一起 (注意：这样snap后，实际上仍然是两个vertices) &amp;mdash;&amp;mdash;&amp;gt; two solutions&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;use &lt;strong&gt;snap&lt;/strong&gt; along with &lt;strong&gt;Auto Merge Vertices&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;after &lt;strong&gt;snap&lt;/strong&gt;, &lt;code&gt;A&lt;/code&gt; to select all, then &lt;code&gt;M&lt;/code&gt; to merge &lt;code&gt;merge by distance&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;snap along an &lt;strong&gt;axis&lt;/strong&gt;, instead of snap two vertices, to &lt;strong&gt;align&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;after delete some faces, use &lt;code&gt;F&lt;/code&gt; to &lt;strong&gt;Fill / Create face(s)&lt;/strong&gt; (自动填补holes)&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;select the whole object and &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;select certain edges and &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;after selecting 2 vertices, press &lt;code&gt;J&lt;/code&gt; / &lt;code&gt;F&lt;/code&gt; to add an edge between these 2 vertices (&lt;code&gt;J&lt;/code&gt; will make the object more low-poly, while &lt;code&gt;F&lt;/code&gt; simply add an edge without affecting the original shape)&lt;/p&gt;
&lt;p&gt;Besides &lt;code&gt;J&lt;/code&gt;, we can use &lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;T&lt;/code&gt; to &lt;strong&gt;Triangulate selection&lt;/strong&gt; to make a round face more low-poly after using &lt;code&gt;F&lt;/code&gt; to &lt;strong&gt;Fill a hole&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;setting: enable &lt;strong&gt;Backface Culling&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;F3&lt;/code&gt; search &lt;strong&gt;flip normal&lt;/strong&gt; (or &lt;code&gt;alt&lt;/code&gt; + &lt;code&gt;N&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;some faces are &lt;strong&gt;flipped&lt;/strong&gt;, to fix it &lt;code&gt;alt&lt;/code&gt; + &lt;code&gt;N&lt;/code&gt; &amp;gt; &lt;strong&gt;recalculate outside&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;X&lt;/code&gt; dissolve edges&lt;/p&gt;
&lt;p&gt;To connect two meshes inside one object into one single mesh, select two faces which you want to connect and &lt;code&gt;F3&lt;/code&gt; &amp;gt; &lt;strong&gt;Bridge Edge Loops&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;tips: &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;D&lt;/code&gt; to duplicate a face, &lt;code&gt;right mouse&lt;/code&gt; to put the new face exactly the same location as the original one&lt;/p&gt;
&lt;p&gt;Separate selection to new object: &lt;code&gt;P&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Merge into a single object: &lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;J&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;modifiers&#34;&gt;Modifiers&lt;/h2&gt;
&lt;p&gt;Mirror modifier (use &lt;strong&gt;auto mirror&lt;/strong&gt; add-on)&lt;/p&gt;
&lt;p&gt;Subdivision surface modifier: &lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;5 or other&lt;/code&gt; (subdivide a plane to create low-poly island)&lt;/p&gt;
&lt;p&gt;Displace modifier (low-poly landscape)&lt;/p&gt;
&lt;p&gt;Skin modifier (use with &lt;strong&gt;extra mesh add-on&lt;/strong&gt;, so that we can add &lt;strong&gt;single vertex&lt;/strong&gt;, and then build a low-poly tree)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;A&lt;/code&gt; to select all, and then &lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;A&lt;/code&gt; to scale&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tips&#34;&gt;Tips&lt;/h2&gt;
&lt;p&gt;If we scare the object outside edit mode, &lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;A&lt;/code&gt; &amp;gt; apply scale to make the scare &lt;code&gt;1, 1, 1&lt;/code&gt; again!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Numpad .&lt;/code&gt;: to make viewport rotate around selection&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Compile Using CMake</title>
        <link>https://chen-gary.github.io/p/compile-using-cmake/</link>
        <pubDate>Wed, 03 Mar 2021 15:54:26 +0800</pubDate>
        
        <guid>https://chen-gary.github.io/p/compile-using-cmake/</guid>
        <description>&lt;p&gt;在使用CLion编写C++项目后，IDE会自动生成CMakeLists.txt文件。那么如何手动编译我们写的代码呢？&lt;/p&gt;
&lt;p&gt;步骤如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将项目中的所有源文件 + 自动生成的CMakeLists.txt 传入Linux虚拟机（的同一目录下）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mkdir build
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; build
cmake ..		&lt;span class=&#34;c1&#34;&gt;# 用cmake命令将CMakeLists.txt文件转化为make所需要的makefile文件&lt;/span&gt;
make			&lt;span class=&#34;c1&#34;&gt;# 用make命令编译源码生成可执行程序&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;./name_of_executable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(ref: &lt;a href=&#34;https://www.cnblogs.com/cv-pr/p/6206921.html&#34;&gt;https://www.cnblogs.com/cv-pr/p/6206921.html&lt;/a&gt;)&lt;/p&gt;
</description>
        </item>
        <item>
        <title>CSC3050 Tips</title>
        <link>https://chen-gary.github.io/p/csc3050-tips/</link>
        <pubDate>Sat, 20 Feb 2021 22:59:49 +0800</pubDate>
        
        <guid>https://chen-gary.github.io/p/csc3050-tips/</guid>
        <description>&lt;h2 id=&#34;1_virtual-machine-setuppdf&#34;&gt;1_Virtual Machine Setup.pdf&lt;/h2&gt;
&lt;p&gt;http://127.0.0.1:3050/login&lt;/p&gt;
&lt;p&gt;password: csc3050&lt;/p&gt;
&lt;p&gt;You will see a vscode running in your browser&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;openssh&lt;/code&gt; server&lt;/p&gt;
&lt;p&gt;open terminal&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ssh -p5678 csc3050@127.0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;password: csc3050&lt;/p&gt;
&lt;p&gt;Then you will login the machine&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;transfer-files-to-vm&#34;&gt;Transfer files to VM&lt;/h3&gt;
&lt;p&gt;Simply drag files in the vscode&amp;hellip;&lt;/p&gt;
&lt;p&gt;(Use Git or SCP. See the pdf file.)&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Blender: Import Material and Setup Material Library</title>
        <link>https://chen-gary.github.io/p/blender-import-material-and-setup-material-library/</link>
        <pubDate>Thu, 18 Feb 2021 20:57:29 +0800</pubDate>
        
        <guid>https://chen-gary.github.io/p/blender-import-material-and-setup-material-library/</guid>
        <description>&lt;h2 id=&#34;使用material-library的原因&#34;&gt;使用material library的原因&lt;/h2&gt;
&lt;p&gt;多人合作时，方便颜色统一（尤其针对统一玻璃之类的复杂材质）&lt;/p&gt;
&lt;h2 id=&#34;如何导入material&#34;&gt;如何导入material&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;打开想要导入material的 blender file&lt;/li&gt;
&lt;li&gt;导航栏选择 File &amp;gt; Append&lt;/li&gt;
&lt;li&gt;找到&lt;code&gt;material_template_lib.blend&lt;/code&gt;，并双击进入&lt;/li&gt;
&lt;li&gt;进入&lt;code&gt;Material&lt;/code&gt;文件夹，并双击选择想导入的material&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/548ea9bd6677b3840b98c2b3ef078787dfec0306e47559ad475b4419735de6bc/68747470733a2f2f692e737461636b2e696d6775722e636f6d2f6141584f772e676966&#34; alt=&#34;gif&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 110; flex-basis: 265px&#34;&gt;
		&lt;a href=&#34;https://chen-gary.github.io/p/blender-import-material-and-setup-material-library/img_1.png&#34; data-size=&#34;402x364&#34;&gt;&lt;img src=&#34;https://chen-gary.github.io/p/blender-import-material-and-setup-material-library/img_1.png&#34;
				srcset=&#34;https://chen-gary.github.io/p/blender-import-material-and-setup-material-library/img_1_hu763381cffcdc03b384473bdcb971a8bb_44806_480x0_resize_box_2.png 480w, https://chen-gary.github.io/p/blender-import-material-and-setup-material-library/img_1_hu763381cffcdc03b384473bdcb971a8bb_44806_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;402&#34;
				height=&#34;364&#34;
				loading=&#34;lazy&#34;
				alt=&#34;pic&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;pic&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样在Material selector中应该就能找到刚刚导入的material&lt;/p&gt;
&lt;p&gt;（注意&lt;strong&gt;重命名&lt;/strong&gt;导入的material）&lt;/p&gt;
&lt;p&gt;（ref &lt;a href=&#34;https://blender.stackexchange.com/questions/63018/how-to-import-downloaded-materials-files/63055&#34;&gt;https://blender.stackexchange.com/questions/63018/how-to-import-downloaded-materials-files/63055&lt;/a&gt;）&lt;/p&gt;
&lt;h2 id=&#34;合作方式&#34;&gt;*合作方式&lt;/h2&gt;
&lt;p&gt;比如我负责选定玻璃的材质，那么我就&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载最新的&lt;code&gt;material_template_lib.blend&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;新建一个cube，后新建并附上调好的玻璃材质&lt;/li&gt;
&lt;li&gt;commit回GitHub，更新&lt;code&gt;material_template_lib.blend&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Blender: UV Coloring Method</title>
        <link>https://chen-gary.github.io/p/blender-uv-coloring-method/</link>
        <pubDate>Thu, 18 Feb 2021 20:28:18 +0800</pubDate>
        
        <guid>https://chen-gary.github.io/p/blender-uv-coloring-method/</guid>
        <description>&lt;p&gt;&lt;strong&gt;The palette style UV coloring method&lt;/strong&gt; 是一个使用&lt;strong&gt;调色板图片(palette)&lt;/strong&gt; 对模型涂色的方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：涂色非常简单快速，可以边建模边涂色（辅助建模）&lt;/li&gt;
&lt;li&gt;缺点：有的时候不好找想要的颜色；多人合作时不方便后期统一颜色；导入unity时需要更改几个默认设置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为解决这些问题，我找到了一个快速对 UV coloring 的模型&lt;strong&gt;用标准 material 重新上色&lt;/strong&gt;的方法。总的效率可能比建完整个模型再上色更高。&lt;/p&gt;
&lt;h2 id=&#34;the-palette-style-uv-coloring-method&#34;&gt;The palette style UV coloring method&lt;/h2&gt;
&lt;p&gt;这个方法来自于一名油管大佬 &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=1jHUY3qoBu8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.youtube.com/watch?v=1jHUY3qoBu8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;他在这个视频的 02:12 - 4:42 介绍了这个涂色方法&lt;/p&gt;
&lt;p&gt;这个视频的简介里，他给了两个 palette 的图片：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/redirect?v=1jHUY3qoBu8&amp;amp;event=video_description&amp;amp;redir_token=QUFFLUhqblZ6eF9xZ094cFJEaUJXX1VvbHgzVllTdTI5Z3xBQ3Jtc0tseU9hX1phWUtTUl90cWNNREs5elpITkZSUE96RGhwUTNKNFFmZlJSRThIX1JjZHl2eVhrMm05Z1BNcDl0LTl0WW5vUWFvVXdlQzNqb1VuVWRYeUNLSGJ4blI2Rlp4U0FyQlFTWDdSWTlVWkZFZnBVYw%3D%3D&amp;amp;q=https%3A%2F%2Fwww.dropbox.com%2Fs%2Fc5olic38j8fopet%2FImphenziaPalette01.png%3Fdl%3D0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;图一&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/redirect?v=1jHUY3qoBu8&amp;amp;event=video_description&amp;amp;redir_token=QUFFLUhqbmtxSGEza1hSYmp6OEk2VTZvOFRtTjR0bWNjd3xBQ3Jtc0tubXVMSGsybFBKR2NwWklHNHRVM1BBM0ZaZXFpS0dEU3k5VU5aR3RVbmY1WXpQbnBPLVdqeEpQWFI4ejVjOVpjcUtFbHJjWnktMk5ma2o2d3hKSU1SVHNtbnd5Q2pTLUxNd3pCRUhxWjF0SDktQkc3Yw%3D%3D&amp;amp;q=https%3A%2F%2Fwww.dropbox.com%2Fs%2F1w98xiksiwaywqx%2FImphenziaPalette01-256-Gradient.png%3Fdl%3D0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;图二&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以及一个我觉得蛮不错的blender setting视频（这个很短的视频里也介绍了 The palette style UV coloring method 的方法）：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=BlxiCd0Upg4&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.youtube.com/watch?v=BlxiCd0Upg4&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;用标准-material-重新上色&#34;&gt;用标准 material 重新上色&lt;/h2&gt;
&lt;p&gt;假设在建模的时候，我把墙面涂成了诡异的蓝色，而右边material栏中的 &lt;code&gt;Material_final&lt;/code&gt; 是最终统一的墙面颜色。&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 188; flex-basis: 453px&#34;&gt;
		&lt;a href=&#34;https://chen-gary.github.io/p/blender-uv-coloring-method/1.png&#34; data-size=&#34;1920x1017&#34;&gt;&lt;img src=&#34;https://chen-gary.github.io/p/blender-uv-coloring-method/1.png&#34;
				srcset=&#34;https://chen-gary.github.io/p/blender-uv-coloring-method/1_hub89c3d175f779c7894920edbdb7a7efa_845456_480x0_resize_box_2.png 480w, https://chen-gary.github.io/p/blender-uv-coloring-method/1_hub89c3d175f779c7894920edbdb7a7efa_845456_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;1920&#34;
				height=&#34;1017&#34;
				loading=&#34;lazy&#34;
				alt=&#34;pic1&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;pic1&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tab&lt;/code&gt; 进入编辑模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;鼠标放在中间的编辑窗口，按 &lt;code&gt;A&lt;/code&gt; 全选&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点亮左侧 UV editor 窗口的这个icon (红色框框)&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 29; flex-basis: 70px&#34;&gt;
		&lt;a href=&#34;https://chen-gary.github.io/p/blender-uv-coloring-method/icon.png&#34; data-size=&#34;274x929&#34;&gt;&lt;img src=&#34;https://chen-gary.github.io/p/blender-uv-coloring-method/icon.png&#34;
				srcset=&#34;https://chen-gary.github.io/p/blender-uv-coloring-method/icon_hu9d9b46e61bcd9c70c28bc52bccb2725e_29781_480x0_resize_box_2.png 480w, https://chen-gary.github.io/p/blender-uv-coloring-method/icon_hu9d9b46e61bcd9c70c28bc52bccb2725e_29781_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;274&#34;
				height=&#34;929&#34;
				loading=&#34;lazy&#34;
				alt=&#34;pic2&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;pic2&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;左键框选诡异的蓝色，这样中间窗口中所有使用这种蓝色的面就被选中了&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 188; flex-basis: 453px&#34;&gt;
		&lt;a href=&#34;https://chen-gary.github.io/p/blender-uv-coloring-method/2.png&#34; data-size=&#34;1920x1017&#34;&gt;&lt;img src=&#34;https://chen-gary.github.io/p/blender-uv-coloring-method/2.png&#34;
				srcset=&#34;https://chen-gary.github.io/p/blender-uv-coloring-method/2_hu858b9284fc3023648efa0d79292c40d6_970629_480x0_resize_box_2.png 480w, https://chen-gary.github.io/p/blender-uv-coloring-method/2_hu858b9284fc3023648efa0d79292c40d6_970629_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;1920&#34;
				height=&#34;1017&#34;
				loading=&#34;lazy&#34;
				alt=&#34;pic3&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;pic3&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这时候在右侧material栏更换material，并点击&lt;code&gt;Assign&lt;/code&gt;，墙面就重新上色完成&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 188; flex-basis: 453px&#34;&gt;
		&lt;a href=&#34;https://chen-gary.github.io/p/blender-uv-coloring-method/3.png&#34; data-size=&#34;1920x1017&#34;&gt;&lt;img src=&#34;https://chen-gary.github.io/p/blender-uv-coloring-method/3.png&#34;
				srcset=&#34;https://chen-gary.github.io/p/blender-uv-coloring-method/3_hu858b9284fc3023648efa0d79292c40d6_963003_480x0_resize_box_2.png 480w, https://chen-gary.github.io/p/blender-uv-coloring-method/3_hu858b9284fc3023648efa0d79292c40d6_963003_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;1920&#34;
				height=&#34;1017&#34;
				loading=&#34;lazy&#34;
				alt=&#34;pic4&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;pic4&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;同理，我们也可以对其他面重新上色&lt;/p&gt;
&lt;p&gt;这样直接把&lt;code&gt;.blend&lt;/code&gt; 文件拖入unity 也可以保持所有颜色，无需任何设置。&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 240; flex-basis: 577px&#34;&gt;
		&lt;a href=&#34;https://chen-gary.github.io/p/blender-uv-coloring-method/4.png&#34; data-size=&#34;1920x798&#34;&gt;&lt;img src=&#34;https://chen-gary.github.io/p/blender-uv-coloring-method/4.png&#34;
				srcset=&#34;https://chen-gary.github.io/p/blender-uv-coloring-method/4_hua455ee9780054692b1349ee11d4f44dc_279209_480x0_resize_box_2.png 480w, https://chen-gary.github.io/p/blender-uv-coloring-method/4_hua455ee9780054692b1349ee11d4f44dc_279209_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;1920&#34;
				height=&#34;798&#34;
				loading=&#34;lazy&#34;
				alt=&#34;pic5&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;pic5&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
