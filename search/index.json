[{"content":"配置 Configuration git config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;email@example.com\u0026#34; git config --list 创建版本库 git init ls -ah 基础命令 git add \u0026lt;file\u0026gt; git commit -m \u0026lt;message\u0026gt; git status 版本回退 git log git log --pretty=oneline  HEAD 当前版本 HEAD^ 上一个版本 HEAD^^ 上上一个版本 HEAD~100  git reset --hard HEAD^ git log 回到未来的某个版本 git reset --hard \u0026lt;commit_id\u0026gt; git reset --hard 1094a git reflog # find commit id 撤销修改 注意：以下命令似乎是旧版git命令，虽然不影响使用，但建议参考git status的提示，使用新版命令。\n1. 丢弃工作区的修改 git checkout -- file git checkout -- README.md 两种情况:\n  一种是README.md自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；\n  一种是README.md已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。\n  总之，就是让这个文件回到最近一次git commit或git add时的状态。\n2. 丢弃暂存区的修改 用命令git reset HEAD \u0026lt;file\u0026gt;可以把暂存区的修改撤销掉（unstage），重新放回工作区\ngit reset HEAD README.md # 把暂存区的修改回退到工作区 接着，丢弃工作区的修改\u0026hellip;\n3. 丢弃commit 使用版本回退\n远程仓库 1. Github配置 (SSH)   创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。\nssh-keygen -t rsa -C \u0026#34;youremail@example.com\u0026#34; 一路回车\n id_rsa是私钥 id_rsa.pub是公钥    登陆GitHub，打开“Account settings”，“SSH Keys”页面。然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容。\n  2. (将已有的本地仓库)添加远程库   在GitHub新建repo\n  把一个已有的本地仓库与之关联\n在本地的仓库下运行命令\ngit remote add origin git@github.com:XXXXXX/YYYYYY.git 添加后，远程库的名字就是origin (这是Git默认的叫法)\n  （首次）把本地库的所有内容推送到远程库上\ngit push -u origin main 注意：由于远程库是空的，我们第一次推送main分支时，加上了-u参数，Git不但会把本地的main分支内容推送的远程新的main分支，还会把本地的main分支和远程的main分支关联起来，在以后的推送或者拉取时就可以简化命令。\n  （非首次）把本地库推送到远程库\ngit push origin main   注意：SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。\n3. 删除远程库 (解除本地和远程的绑定关系) 如果添加的时候地址写错了，或者就是想删除远程库，\n先用git remote -v查看远程库信息 (git remote 可查阅更简单的远程库的信息)\ngit remote -v 根据名字删除，比如删除origin\ngit remote rm origin 从远程库克隆 git clone git@github.com:XXXXX/YYYYY.git 分支管理   HEAD指向当前分支 e.g. main\n  main指向提交\n  1. 分支基础操作（创建与合并分支） 实战 (example)\n  创建dev分支，然后切换到dev分支\ngit checkout -b dev git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：\ngit branch dev git checkout dev   用git branch命令查看当前分支\ngit branch git branch命令会列出所有分支，当前分支前面会标一个*号。\n  切换回main分支\ngit checkout main   dev分支的工作成果合并到main分支上\ngit merge dev git merge命令用于合并指定分支到当前分支。\n注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。\n当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。\n  删除dev分支\ngit branch -d dev git branch   注意：\n  创建并切换到新的dev分支，可以使用：\ngit switch -c dev   直接切换到已有的main分支，可以使用：\ngit switch main   分支基础操作总结：\n查看分支：git branch\n创建分支：git branch \u0026lt;name\u0026gt;\n切换分支：git checkout \u0026lt;name\u0026gt;或者git switch \u0026lt;name\u0026gt;\n创建+切换分支：git checkout -b \u0026lt;name\u0026gt;或者git switch -c \u0026lt;name\u0026gt;\n合并某分支到当前分支：git merge \u0026lt;name\u0026gt;\n删除分支：git branch -d \u0026lt;name\u0026gt;\n2. 解决冲突 main分支和feature1分支各自都分别有新的提交\n这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突\ngit merge feature1 # Git告诉我们，readme.txt文件存在冲突，必须手动解决冲突后再提交 git status # 也可以告诉我们冲突的文件 注意：解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。\n直接查看README.md的内容:\nGit用\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;，=======，\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;标记出不同分支的内容\n手动解决冲突后再提交 =\u0026gt; 现在，master分支和feature1分支变成了下图所示：\n查看分支的合并情况：git log --graph --pretty=oneline --abbrev-commit\n最后，删除feature1分支：git branch -d feature1\n工作完成。\n3. 分支管理策略 (普通模式合并) 通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。\n如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。\n准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：\ngit merge --no-ff -m \u0026#34;merge with no-ff\u0026#34; dev 因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。\n4. Bug分支 (stash功能) git stash # 去别的分支修bug git stash list # method 1 git stash apply # 恢复，但是恢复后，stash内容并不删除 git stash drop # 删除stash内容 # method 2 git stash pop # 恢复的同时把stash内容也删了 (recommended) 你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：\ngit stash apply stash@{0} Q: 如果在两个独立的分支上有同样的bug (e.g. main和dev上有同一bug)，且main上的bug已被修复，如何优雅地/简单地修复dev上的bug？\nA: 使用cherry-pick命令\n5. Feature分支 (强行删除未合并的分支) $ git branch -d feature-vulcan error: The branch \u0026#39;feature-vulcan\u0026#39; is not fully merged. If you are sure you want to delete it, run \u0026#39;git branch -D feature-vulcan\u0026#39;. # Git友情提醒，feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的-D参数 $ git branch -D feature-vulcan Deleted branch feature-vulcan (was 287773e). 开发一个新feature，最好新建一个分支；\n如果要丢弃一个没有被合并过的分支，可以通过git branch -D \u0026lt;name\u0026gt;强行删除。\n6. 多人协作 # 查看远程库的信息 git remote git remote -v # 推送分支 git push origin master git push origin dev # 不一定所有分支都要推送到远程，比如bug分支只要留在本地repo就行了 抓取分支 多人协作时，大家都会往master和dev分支上推送各自的修改。\n当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支。不信可以用git branch命令看看\n现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：\n(注意：在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致)\ngit checkout -b dev origin/dev # git pull #???拉取远端dev? 你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送。\n推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送。\ngit pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接。\ngit branch --set-upstream-to=origin/\u0026lt;branch_remote\u0026gt; \u0026lt;branch_local\u0026gt; git branch --set-upstream-to=origin/dev dev git pull 这回git pull成功，但是合并有冲突，需要手动解决。\n多人协作小结 多人协作的工作模式通常是这样：\n 首先，可以试图用git push origin \u0026lt;branch-name\u0026gt;推送自己的修改； 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并； 如果合并有冲突，则解决冲突，并在本地提交； 没有冲突或者解决掉冲突后，再用git push origin \u0026lt;branch-name\u0026gt;推送就能成功！  如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to \u0026lt;branch-name\u0026gt; origin/\u0026lt;branch-name\u0026gt;。\n注意：可以克隆指定分支\ngit clone -b \u0026lt;branch\u0026gt; \u0026lt;remote_repo\u0026gt; git clone -b BBBBBBB git@github.com:XXXXXX/YYYYYYY.git Rebase git rebase 我看不懂。。。\n标签管理 Git的标签：指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动）\ntag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起\n1. 创建标签 git checkout main # 默认标签是打在最新提交的commit上的 # 1 git tag \u0026lt;name\u0026gt; git tag v1.0 # 2 git tag \u0026lt;tag_name\u0026gt; \u0026lt;commit_id\u0026gt; git tag v0.9 f52c633 # 3 创建带有说明的标签 git tag -a \u0026lt;tag_name\u0026gt; -m \u0026#34;blablabla...\u0026#34; git tag -a v0.1 -m \u0026#34;version 0.1 released\u0026#34; 1094adb git tag # 查看所有标签 git show \u0026lt;tagname\u0026gt; # 查看标签信息 2. 操作标签 删除标签\ngit tag -d v0.1 创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。\n如果要推送某个标签到远程，\ngit push origin \u0026lt;tag_name\u0026gt; git push origin v1.0 # 一次性推送全部尚未推送到远程的本地标签 git push origin --tags 如果标签已经推送到远程，要删除远程标签就麻烦一点：\n# 先从本地删除 git tag -d v0.9 # 然后，从远程删除 git push origin :refs/tags/v0.9 其他命令 不常用的基础命令\n  查看修改\ngit diff git diff README.md   删除文件\ngit rm \u0026lt;file\u0026gt; # 与`git add\u0026lt;file\u0026gt;`效果一样   强制添加被ignore的文件\ngit add -f \u0026lt;file_name\u0026gt;   检查.gitignore对于某个文件的规则\ngit check-ignore -v \u0026lt;file_name\u0026gt; Git会告诉我们，.gitignore的第X行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。\n  配置别名\n# e.g. 让st表示status git config --global alias.st status 或直接在git的全局/某个repo的config文件中配置\n  ","date":"2021-05-30T09:11:17+08:00","permalink":"https://chen-gary.github.io/p/git-basic-skills/","title":"Git Basic Skills"},{"content":"View: Numpad 1 / 3 / 7, or ctrl + Numpad 1 / 3 / 7\nE to extrude\n alt + E  face normal\n I to insert\n double lick I\nB while doing insert (if B does not work, press I again to disable individual faces) (e.g. car window)\n G\nS\nR\nO proportional editing (when modeling the tree)\nctrl + B Bevel\nalt + S shrink / flatten\nshift + right click place 3D curser\n shift + S \u0026gt; Cursor to selected\nshift + C re-center 3D curser\n L select linked (in edit mode)\n shift + L to deselect linked\n Selection Method L\nLoop select: alt + click on edge (in face selection mode)\ncircle select: C\n deselect: middle mouse\n ring select: alt + ctrl (in edge select mode)\nLoop select: alt + click on edge (in edge selection mode)\nselect shortest path: ctrl (in edge select mode)\nbox select: B (in vertex select mode)\nalt + Z enable/disable X-ray (to select the back vertices)\nLasso select (套索): ctrl + right mouse button\nGrow selection (select all faces neighboring to the selected face): ctrl + Numpad plus +\n Shrink selection (opposite to grow selection): ctrl + -\n select random\nselect similar: shift + G\nchecker deselect (间隔选中效果，像足球那样): F\nH hide selected objects\n alt + H unhide all\n ctrl + I: Invert selection (选中所有未被当前选中的东西)\n Loop cut: ctrl + R\nKnife tool: K\n ctrl: snap to center with knife tool\nC: angle constraint with knife tool\n ctrl + 1-5: subdivision modifier (remember to apply this modifier)\n if it make the object not low-poly, then use Decimate modifier to make it back to low-poly.\n(see video around 48:00)\n ,: Orientation\nsnap (上方的磁贴icon) (hotkey: ctrl when using G) \u0026mdash;-\u0026gt; 把两个vertices连在一起 (注意：这样snap后，实际上仍然是两个vertices) \u0026mdash;\u0026mdash;\u0026gt; two solutions\n  use snap along with Auto Merge Vertices after snap, A to select all, then M to merge merge by distance    snap along an axis, instead of snap two vertices, to align\n after delete some faces, use F to Fill / Create face(s) (自动填补holes)\n  select the whole object and F select certain edges and F   after selecting 2 vertices, press J / F to add an edge between these 2 vertices (J will make the object more low-poly, while F simply add an edge without affecting the original shape)\nBesides J, we can use ctrl + T to Triangulate selection to make a round face more low-poly after using F to Fill a hole\nsetting: enable Backface Culling\nF3 search flip normal (or alt + N)\nsome faces are flipped, to fix it alt + N \u0026gt; recalculate outside\nX dissolve edges\nTo connect two meshes inside one object into one single mesh, select two faces which you want to connect and F3 \u0026gt; Bridge Edge Loops\ntips: shift + D to duplicate a face, right mouse to put the new face exactly the same location as the original one\nSeparate selection to new object: P\nMerge into a single object: ctrl + J\nModifiers Mirror modifier (use auto mirror add-on)\nSubdivision surface modifier: ctrl + 5 or other (subdivide a plane to create low-poly island)\nDisplace modifier (low-poly landscape)\nSkin modifier (use with extra mesh add-on, so that we can add single vertex, and then build a low-poly tree)\n A to select all, and then ctrl + A to scale\n  Tips If we scare the object outside edit mode, ctrl + A \u0026gt; apply scale to make the scare 1, 1, 1 again!\nNumpad .: to make viewport rotate around selection\n","date":"2021-03-03T16:48:34+08:00","permalink":"https://chen-gary.github.io/p/blender-tutorial-notes/","title":"Blender Tutorial Notes"},{"content":"在使用CLion编写C++项目后，IDE会自动生成CMakeLists.txt文件。那么如何手动编译我们写的代码呢？\n步骤如下\n  将项目中的所有源文件 + 自动生成的CMakeLists.txt 传入Linux虚拟机（的同一目录下）\n  mkdir build cd build cmake ..\t# 用cmake命令将CMakeLists.txt文件转化为make所需要的makefile文件 make\t# 用make命令编译源码生成可执行程序   运行\n./name_of_executable   (ref: https://www.cnblogs.com/cv-pr/p/6206921.html)\n","date":"2021-03-03T15:54:26+08:00","permalink":"https://chen-gary.github.io/p/compile-using-cmake/","title":"Compile Using CMake"},{"content":"1_Virtual Machine Setup.pdf http://127.0.0.1:3050/login\npassword: csc3050\nYou will see a vscode running in your browser\n openssh server\nopen terminal\nssh -p5678 csc3050@127.0.0.1 password: csc3050\nThen you will login the machine\n Transfer files to VM Simply drag files in the vscode\u0026hellip;\n(Use Git or SCP. See the pdf file.)\n","date":"2021-02-20T22:59:49+08:00","permalink":"https://chen-gary.github.io/p/csc3050-tips/","title":"CSC3050 Tips"},{"content":"使用material library的原因 多人合作时，方便颜色统一（尤其针对统一玻璃之类的复杂材质）\n如何导入material  打开想要导入material的 blender file 导航栏选择 File \u0026gt; Append 找到material_template_lib.blend，并双击进入 进入Material文件夹，并双击选择想导入的material  \rpic\r\n这样在Material selector中应该就能找到刚刚导入的material\n（注意重命名导入的material）\n（ref https://blender.stackexchange.com/questions/63018/how-to-import-downloaded-materials-files/63055）\n*合作方式 比如我负责选定玻璃的材质，那么我就\n 下载最新的material_template_lib.blend 新建一个cube，后新建并附上调好的玻璃材质 commit回GitHub，更新material_template_lib.blend  ","date":"2021-02-18T20:57:29+08:00","permalink":"https://chen-gary.github.io/p/blender-import-material-and-setup-material-library/","title":"Blender: Import Material and Setup Material Library"},{"content":"The palette style UV coloring method 是一个使用调色板图片(palette) 对模型涂色的方法\n 优点：涂色非常简单快速，可以边建模边涂色（辅助建模） 缺点：有的时候不好找想要的颜色；多人合作时不方便后期统一颜色；导入unity时需要更改几个默认设置  为解决这些问题，我找到了一个快速对 UV coloring 的模型用标准 material 重新上色的方法。总的效率可能比建完整个模型再上色更高。\nThe palette style UV coloring method 这个方法来自于一名油管大佬 https://www.youtube.com/watch?v=1jHUY3qoBu8\n他在这个视频的 02:12 - 4:42 介绍了这个涂色方法\n这个视频的简介里，他给了两个 palette 的图片：\n  图一\n  图二\n  以及一个我觉得蛮不错的blender setting视频（这个很短的视频里也介绍了 The palette style UV coloring method 的方法）：\nhttps://www.youtube.com/watch?v=BlxiCd0Upg4\n用标准 material 重新上色 假设在建模的时候，我把墙面涂成了诡异的蓝色，而右边material栏中的 Material_final 是最终统一的墙面颜色。\n\rpic1\r\n  tab 进入编辑模式\n  鼠标放在中间的编辑窗口，按 A 全选\n  点亮左侧 UV editor 窗口的这个icon (红色框框)\n\rpic2\r\n  左键框选诡异的蓝色，这样中间窗口中所有使用这种蓝色的面就被选中了\n\rpic3\r\n  这时候在右侧material栏更换material，并点击Assign，墙面就重新上色完成\n\rpic4\r\n  同理，我们也可以对其他面重新上色\n这样直接把.blend 文件拖入unity 也可以保持所有颜色，无需任何设置。\n\rpic5\r\n","date":"2021-02-18T20:28:18+08:00","permalink":"https://chen-gary.github.io/p/blender-uv-coloring-method/","title":"Blender: UV Coloring Method"}]